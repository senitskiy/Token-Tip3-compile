            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////

    ///////// Fishingss ////////////
    function setRole92(uint256 roleId) public override onlySuperuser {
        rolesMap[92] = roleId;
    }

    function storeFishingss(uint num) public override onlyMemberOf(rolesMap[92]) {
        fishingss = num;
    }   

    function getFishingss() public view alwaysAccept returns (uint current_apples) {
        current_fishingss = fishingss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////

    ///////// Fishingss ////////////
    function setRole92(uint256 roleId) public override onlySuperuser {
        rolesMap[92] = roleId;
    }

    function storeFishingss(uint num) public override onlyMemberOf(rolesMap[92]) {
        fishingss = num;
    }   

    function getFishingss() public view alwaysAccept returns (uint current_apples) {
        current_fishingss = fishingss;
    }

    ////////////////////////////////////////

    ///////// Hyperbolicals ////////////
    function setRole93(uint256 roleId) public override onlySuperuser {
        rolesMap[93] = roleId;
    }

    function storeHyperbolicals(uint num) public override onlyMemberOf(rolesMap[93]) {
        hyperbolicals = num;
    }   

    function getHyperbolicals() public view alwaysAccept returns (uint current_apples) {
        current_hyperbolicals = hyperbolicals;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////

    ///////// Fishingss ////////////
    function setRole92(uint256 roleId) public override onlySuperuser {
        rolesMap[92] = roleId;
    }

    function storeFishingss(uint num) public override onlyMemberOf(rolesMap[92]) {
        fishingss = num;
    }   

    function getFishingss() public view alwaysAccept returns (uint current_apples) {
        current_fishingss = fishingss;
    }

    ////////////////////////////////////////

    ///////// Hyperbolicals ////////////
    function setRole93(uint256 roleId) public override onlySuperuser {
        rolesMap[93] = roleId;
    }

    function storeHyperbolicals(uint num) public override onlyMemberOf(rolesMap[93]) {
        hyperbolicals = num;
    }   

    function getHyperbolicals() public view alwaysAccept returns (uint current_apples) {
        current_hyperbolicals = hyperbolicals;
    }

    ////////////////////////////////////////

    ///////// Objurgates ////////////
    function setRole94(uint256 roleId) public override onlySuperuser {
        rolesMap[94] = roleId;
    }

    function storeObjurgates(uint num) public override onlyMemberOf(rolesMap[94]) {
        objurgates = num;
    }   

    function getObjurgates() public view alwaysAccept returns (uint current_apples) {
        current_objurgates = objurgates;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////

    ///////// Fishingss ////////////
    function setRole92(uint256 roleId) public override onlySuperuser {
        rolesMap[92] = roleId;
    }

    function storeFishingss(uint num) public override onlyMemberOf(rolesMap[92]) {
        fishingss = num;
    }   

    function getFishingss() public view alwaysAccept returns (uint current_apples) {
        current_fishingss = fishingss;
    }

    ////////////////////////////////////////

    ///////// Hyperbolicals ////////////
    function setRole93(uint256 roleId) public override onlySuperuser {
        rolesMap[93] = roleId;
    }

    function storeHyperbolicals(uint num) public override onlyMemberOf(rolesMap[93]) {
        hyperbolicals = num;
    }   

    function getHyperbolicals() public view alwaysAccept returns (uint current_apples) {
        current_hyperbolicals = hyperbolicals;
    }

    ////////////////////////////////////////

    ///////// Objurgates ////////////
    function setRole94(uint256 roleId) public override onlySuperuser {
        rolesMap[94] = roleId;
    }

    function storeObjurgates(uint num) public override onlyMemberOf(rolesMap[94]) {
        objurgates = num;
    }   

    function getObjurgates() public view alwaysAccept returns (uint current_apples) {
        current_objurgates = objurgates;
    }

    ////////////////////////////////////////

    ///////// Membranouss ////////////
    function setRole95(uint256 roleId) public override onlySuperuser {
        rolesMap[95] = roleId;
    }

    function storeMembranouss(uint num) public override onlyMemberOf(rolesMap[95]) {
        membranouss = num;
    }   

    function getMembranouss() public view alwaysAccept returns (uint current_apples) {
        current_membranouss = membranouss;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////

    ///////// Fishingss ////////////
    function setRole92(uint256 roleId) public override onlySuperuser {
        rolesMap[92] = roleId;
    }

    function storeFishingss(uint num) public override onlyMemberOf(rolesMap[92]) {
        fishingss = num;
    }   

    function getFishingss() public view alwaysAccept returns (uint current_apples) {
        current_fishingss = fishingss;
    }

    ////////////////////////////////////////

    ///////// Hyperbolicals ////////////
    function setRole93(uint256 roleId) public override onlySuperuser {
        rolesMap[93] = roleId;
    }

    function storeHyperbolicals(uint num) public override onlyMemberOf(rolesMap[93]) {
        hyperbolicals = num;
    }   

    function getHyperbolicals() public view alwaysAccept returns (uint current_apples) {
        current_hyperbolicals = hyperbolicals;
    }

    ////////////////////////////////////////

    ///////// Objurgates ////////////
    function setRole94(uint256 roleId) public override onlySuperuser {
        rolesMap[94] = roleId;
    }

    function storeObjurgates(uint num) public override onlyMemberOf(rolesMap[94]) {
        objurgates = num;
    }   

    function getObjurgates() public view alwaysAccept returns (uint current_apples) {
        current_objurgates = objurgates;
    }

    ////////////////////////////////////////

    ///////// Membranouss ////////////
    function setRole95(uint256 roleId) public override onlySuperuser {
        rolesMap[95] = roleId;
    }

    function storeMembranouss(uint num) public override onlyMemberOf(rolesMap[95]) {
        membranouss = num;
    }   

    function getMembranouss() public view alwaysAccept returns (uint current_apples) {
        current_membranouss = membranouss;
    }

    ////////////////////////////////////////

    ///////// Strobilaes ////////////
    function setRole96(uint256 roleId) public override onlySuperuser {
        rolesMap[96] = roleId;
    }

    function storeStrobilaes(uint num) public override onlyMemberOf(rolesMap[96]) {
        strobilaes = num;
    }   

    function getStrobilaes() public view alwaysAccept returns (uint current_apples) {
        current_strobilaes = strobilaes;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////

    ///////// Fishingss ////////////
    function setRole92(uint256 roleId) public override onlySuperuser {
        rolesMap[92] = roleId;
    }

    function storeFishingss(uint num) public override onlyMemberOf(rolesMap[92]) {
        fishingss = num;
    }   

    function getFishingss() public view alwaysAccept returns (uint current_apples) {
        current_fishingss = fishingss;
    }

    ////////////////////////////////////////

    ///////// Hyperbolicals ////////////
    function setRole93(uint256 roleId) public override onlySuperuser {
        rolesMap[93] = roleId;
    }

    function storeHyperbolicals(uint num) public override onlyMemberOf(rolesMap[93]) {
        hyperbolicals = num;
    }   

    function getHyperbolicals() public view alwaysAccept returns (uint current_apples) {
        current_hyperbolicals = hyperbolicals;
    }

    ////////////////////////////////////////

    ///////// Objurgates ////////////
    function setRole94(uint256 roleId) public override onlySuperuser {
        rolesMap[94] = roleId;
    }

    function storeObjurgates(uint num) public override onlyMemberOf(rolesMap[94]) {
        objurgates = num;
    }   

    function getObjurgates() public view alwaysAccept returns (uint current_apples) {
        current_objurgates = objurgates;
    }

    ////////////////////////////////////////

    ///////// Membranouss ////////////
    function setRole95(uint256 roleId) public override onlySuperuser {
        rolesMap[95] = roleId;
    }

    function storeMembranouss(uint num) public override onlyMemberOf(rolesMap[95]) {
        membranouss = num;
    }   

    function getMembranouss() public view alwaysAccept returns (uint current_apples) {
        current_membranouss = membranouss;
    }

    ////////////////////////////////////////

    ///////// Strobilaes ////////////
    function setRole96(uint256 roleId) public override onlySuperuser {
        rolesMap[96] = roleId;
    }

    function storeStrobilaes(uint num) public override onlyMemberOf(rolesMap[96]) {
        strobilaes = num;
    }   

    function getStrobilaes() public view alwaysAccept returns (uint current_apples) {
        current_strobilaes = strobilaes;
    }

    ////////////////////////////////////////

    ///////// Less ////////////
    function setRole97(uint256 roleId) public override onlySuperuser {
        rolesMap[97] = roleId;
    }

    function storeLess(uint num) public override onlyMemberOf(rolesMap[97]) {
        less = num;
    }   

    function getLess() public view alwaysAccept returns (uint current_apples) {
        current_less = less;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////

    ///////// Fishingss ////////////
    function setRole92(uint256 roleId) public override onlySuperuser {
        rolesMap[92] = roleId;
    }

    function storeFishingss(uint num) public override onlyMemberOf(rolesMap[92]) {
        fishingss = num;
    }   

    function getFishingss() public view alwaysAccept returns (uint current_apples) {
        current_fishingss = fishingss;
    }

    ////////////////////////////////////////

    ///////// Hyperbolicals ////////////
    function setRole93(uint256 roleId) public override onlySuperuser {
        rolesMap[93] = roleId;
    }

    function storeHyperbolicals(uint num) public override onlyMemberOf(rolesMap[93]) {
        hyperbolicals = num;
    }   

    function getHyperbolicals() public view alwaysAccept returns (uint current_apples) {
        current_hyperbolicals = hyperbolicals;
    }

    ////////////////////////////////////////

    ///////// Objurgates ////////////
    function setRole94(uint256 roleId) public override onlySuperuser {
        rolesMap[94] = roleId;
    }

    function storeObjurgates(uint num) public override onlyMemberOf(rolesMap[94]) {
        objurgates = num;
    }   

    function getObjurgates() public view alwaysAccept returns (uint current_apples) {
        current_objurgates = objurgates;
    }

    ////////////////////////////////////////

    ///////// Membranouss ////////////
    function setRole95(uint256 roleId) public override onlySuperuser {
        rolesMap[95] = roleId;
    }

    function storeMembranouss(uint num) public override onlyMemberOf(rolesMap[95]) {
        membranouss = num;
    }   

    function getMembranouss() public view alwaysAccept returns (uint current_apples) {
        current_membranouss = membranouss;
    }

    ////////////////////////////////////////

    ///////// Strobilaes ////////////
    function setRole96(uint256 roleId) public override onlySuperuser {
        rolesMap[96] = roleId;
    }

    function storeStrobilaes(uint num) public override onlyMemberOf(rolesMap[96]) {
        strobilaes = num;
    }   

    function getStrobilaes() public view alwaysAccept returns (uint current_apples) {
        current_strobilaes = strobilaes;
    }

    ////////////////////////////////////////

    ///////// Less ////////////
    function setRole97(uint256 roleId) public override onlySuperuser {
        rolesMap[97] = roleId;
    }

    function storeLess(uint num) public override onlyMemberOf(rolesMap[97]) {
        less = num;
    }   

    function getLess() public view alwaysAccept returns (uint current_apples) {
        current_less = less;
    }

    ////////////////////////////////////////

    ///////// Rarefiers ////////////
    function setRole98(uint256 roleId) public override onlySuperuser {
        rolesMap[98] = roleId;
    }

    function storeRarefiers(uint num) public override onlyMemberOf(rolesMap[98]) {
        rarefiers = num;
    }   

    function getRarefiers() public view alwaysAccept returns (uint current_apples) {
        current_rarefiers = rarefiers;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////

    ///////// Fishingss ////////////
    function setRole92(uint256 roleId) public override onlySuperuser {
        rolesMap[92] = roleId;
    }

    function storeFishingss(uint num) public override onlyMemberOf(rolesMap[92]) {
        fishingss = num;
    }   

    function getFishingss() public view alwaysAccept returns (uint current_apples) {
        current_fishingss = fishingss;
    }

    ////////////////////////////////////////

    ///////// Hyperbolicals ////////////
    function setRole93(uint256 roleId) public override onlySuperuser {
        rolesMap[93] = roleId;
    }

    function storeHyperbolicals(uint num) public override onlyMemberOf(rolesMap[93]) {
        hyperbolicals = num;
    }   

    function getHyperbolicals() public view alwaysAccept returns (uint current_apples) {
        current_hyperbolicals = hyperbolicals;
    }

    ////////////////////////////////////////

    ///////// Objurgates ////////////
    function setRole94(uint256 roleId) public override onlySuperuser {
        rolesMap[94] = roleId;
    }

    function storeObjurgates(uint num) public override onlyMemberOf(rolesMap[94]) {
        objurgates = num;
    }   

    function getObjurgates() public view alwaysAccept returns (uint current_apples) {
        current_objurgates = objurgates;
    }

    ////////////////////////////////////////

    ///////// Membranouss ////////////
    function setRole95(uint256 roleId) public override onlySuperuser {
        rolesMap[95] = roleId;
    }

    function storeMembranouss(uint num) public override onlyMemberOf(rolesMap[95]) {
        membranouss = num;
    }   

    function getMembranouss() public view alwaysAccept returns (uint current_apples) {
        current_membranouss = membranouss;
    }

    ////////////////////////////////////////

    ///////// Strobilaes ////////////
    function setRole96(uint256 roleId) public override onlySuperuser {
        rolesMap[96] = roleId;
    }

    function storeStrobilaes(uint num) public override onlyMemberOf(rolesMap[96]) {
        strobilaes = num;
    }   

    function getStrobilaes() public view alwaysAccept returns (uint current_apples) {
        current_strobilaes = strobilaes;
    }

    ////////////////////////////////////////

    ///////// Less ////////////
    function setRole97(uint256 roleId) public override onlySuperuser {
        rolesMap[97] = roleId;
    }

    function storeLess(uint num) public override onlyMemberOf(rolesMap[97]) {
        less = num;
    }   

    function getLess() public view alwaysAccept returns (uint current_apples) {
        current_less = less;
    }

    ////////////////////////////////////////

    ///////// Rarefiers ////////////
    function setRole98(uint256 roleId) public override onlySuperuser {
        rolesMap[98] = roleId;
    }

    function storeRarefiers(uint num) public override onlyMemberOf(rolesMap[98]) {
        rarefiers = num;
    }   

    function getRarefiers() public view alwaysAccept returns (uint current_apples) {
        current_rarefiers = rarefiers;
    }

    ////////////////////////////////////////

    ///////// Cylixs ////////////
    function setRole99(uint256 roleId) public override onlySuperuser {
        rolesMap[99] = roleId;
    }

    function storeCylixs(uint num) public override onlyMemberOf(rolesMap[99]) {
        cylixs = num;
    }   

    function getCylixs() public view alwaysAccept returns (uint current_apples) {
        current_cylixs = cylixs;
    }

    ////////////////////////////////////////
            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////

    ///////// Recencys ////////////
    function setRole87(uint256 roleId) public override onlySuperuser {
        rolesMap[87] = roleId;
    }

    function storeRecencys(uint num) public override onlyMemberOf(rolesMap[87]) {
        recencys = num;
    }   

    function getRecencys() public view alwaysAccept returns (uint current_apples) {
        current_recencys = recencys;
    }

    ////////////////////////////////////////

    ///////// Briniess ////////////
    function setRole88(uint256 roleId) public override onlySuperuser {
        rolesMap[88] = roleId;
    }

    function storeBriniess(uint num) public override onlyMemberOf(rolesMap[88]) {
        briniess = num;
    }   

    function getBriniess() public view alwaysAccept returns (uint current_apples) {
        current_briniess = briniess;
    }

    ////////////////////////////////////////

    ///////// Verduress ////////////
    function setRole89(uint256 roleId) public override onlySuperuser {
        rolesMap[89] = roleId;
    }

    function storeVerduress(uint num) public override onlyMemberOf(rolesMap[89]) {
        verduress = num;
    }   

    function getVerduress() public view alwaysAccept returns (uint current_apples) {
        current_verduress = verduress;
    }

    ////////////////////////////////////////

    ///////// Impassablys ////////////
    function setRole90(uint256 roleId) public override onlySuperuser {
        rolesMap[90] = roleId;
    }

    function storeImpassablys(uint num) public override onlyMemberOf(rolesMap[90]) {
        impassablys = num;
    }   

    function getImpassablys() public view alwaysAccept returns (uint current_apples) {
        current_impassablys = impassablys;
    }

    ////////////////////////////////////////

    ///////// Democratics ////////////
    function setRole91(uint256 roleId) public override onlySuperuser {
        rolesMap[91] = roleId;
    }

    function storeDemocratics(uint num) public override onlyMemberOf(rolesMap[91]) {
        democratics = num;
    }   

    function getDemocratics() public view alwaysAccept returns (uint current_apples) {
        current_democratics = democratics;
    }

    ////////////////////////////////////////

    ///////// Fishingss ////////////
    function setRole92(uint256 roleId) public override onlySuperuser {
        rolesMap[92] = roleId;
    }

    function storeFishingss(uint num) public override onlyMemberOf(rolesMap[92]) {
        fishingss = num;
    }   

    function getFishingss() public view alwaysAccept returns (uint current_apples) {
        current_fishingss = fishingss;
    }

    ////////////////////////////////////////

    ///////// Hyperbolicals ////////////
    function setRole93(uint256 roleId) public override onlySuperuser {
        rolesMap[93] = roleId;
    }

    function storeHyperbolicals(uint num) public override onlyMemberOf(rolesMap[93]) {
        hyperbolicals = num;
    }   

    function getHyperbolicals() public view alwaysAccept returns (uint current_apples) {
        current_hyperbolicals = hyperbolicals;
    }

    ////////////////////////////////////////

    ///////// Objurgates ////////////
    function setRole94(uint256 roleId) public override onlySuperuser {
        rolesMap[94] = roleId;
    }

    function storeObjurgates(uint num) public override onlyMemberOf(rolesMap[94]) {
        objurgates = num;
    }   

    function getObjurgates() public view alwaysAccept returns (uint current_apples) {
        current_objurgates = objurgates;
    }

    ////////////////////////////////////////

    ///////// Membranouss ////////////
    function setRole95(uint256 roleId) public override onlySuperuser {
        rolesMap[95] = roleId;
    }

    function storeMembranouss(uint num) public override onlyMemberOf(rolesMap[95]) {
        membranouss = num;
    }   

    function getMembranouss() public view alwaysAccept returns (uint current_apples) {
        current_membranouss = membranouss;
    }

    ////////////////////////////////////////

    ///////// Strobilaes ////////////
    function setRole96(uint256 roleId) public override onlySuperuser {
        rolesMap[96] = roleId;
    }

    function storeStrobilaes(uint num) public override onlyMemberOf(rolesMap[96]) {
        strobilaes = num;
    }   

    function getStrobilaes() public view alwaysAccept returns (uint current_apples) {
        current_strobilaes = strobilaes;
    }

    ////////////////////////////////////////

    ///////// Less ////////////
    function setRole97(uint256 roleId) public override onlySuperuser {
        rolesMap[97] = roleId;
    }

    function storeLess(uint num) public override onlyMemberOf(rolesMap[97]) {
        less = num;
    }   

    function getLess() public view alwaysAccept returns (uint current_apples) {
        current_less = less;
    }

    ////////////////////////////////////////

    ///////// Rarefiers ////////////
    function setRole98(uint256 roleId) public override onlySuperuser {
        rolesMap[98] = roleId;
    }

    function storeRarefiers(uint num) public override onlyMemberOf(rolesMap[98]) {
        rarefiers = num;
    }   

    function getRarefiers() public view alwaysAccept returns (uint current_apples) {
        current_rarefiers = rarefiers;
    }

    ////////////////////////////////////////

    ///////// Cylixs ////////////
    function setRole99(uint256 roleId) public override onlySuperuser {
        rolesMap[99] = roleId;
    }

    function storeCylixs(uint num) public override onlyMemberOf(rolesMap[99]) {
        cylixs = num;
    }   

    function getCylixs() public view alwaysAccept returns (uint current_apples) {
        current_cylixs = cylixs;
    }

    ////////////////////////////////////////
}            
        pragma solidity >= 0.6.0;
        pragma AbiHeader expire;
        
        import "./Wallet.sol";
        import "./Interfaces.sol";
        
        /**
        * @title TestStorage with AccessControl and Wallet
        * @dev Store & retrieve value in a variable
        */
        contract TestStorage is
        ////////////////////////////////////////
StoreEmitss, RoleEmitss, 
StoreGeometrids, RoleGeometrids, 
StoreUnpedantics, RoleUnpedantics, 
StoreIndigenouslys, RoleIndigenouslys, 
StoreSerfdoms, RoleSerfdoms, 
StoreEmbryons, RoleEmbryons, 
StoreChlorophylls, RoleChlorophylls, 
StoreUnfastidiouss, RoleUnfastidiouss, 
StoreIntercrops, RoleIntercrops, 
StoreSenseiss, RoleSenseiss, 
StoreEpizoisms, RoleEpizoisms, 
StoreCockishs, RoleCockishs, 
StoreBurnetss, RoleBurnetss, 
StoreWetteds, RoleWetteds, 
StoreViewings, RoleViewings, 
StoreFunkerss, RoleFunkerss, 
StoreBulks, RoleBulks, 
StoreGrumpishs, RoleGrumpishs, 
StoreDoings, RoleDoings, 
StorePhonemicss, RolePhonemicss, 
StoreStoplightss, RoleStoplightss, 
StorePollenosiss, RolePollenosiss, 
StoreReclusivenesss, RoleReclusivenesss, 
StoreGlabellaes, RoleGlabellaes, 
StoreDeclaweds, RoleDeclaweds, 
StoreMoronitiess, RoleMoronitiess, 
StoreDetoxifieds, RoleDetoxifieds, 
StoreInfatuateds, RoleInfatuateds, 
StoreApportioneds, RoleApportioneds, 
StoreSteamships, RoleSteamships, 
StoreAllegiances, RoleAllegiances, 
StoreOrderlesss, RoleOrderlesss, 
StoreSlobbishs, RoleSlobbishs, 
StoreEquinoxess, RoleEquinoxess, 
StoreGreaserss, RoleGreaserss, 
StoreScootss, RoleScootss, 
StoreDabbings, RoleDabbings, 
StoreCliftss, RoleCliftss, 
StoreClipsheetss, RoleClipsheetss, 
StoreDeveinings, RoleDeveinings, 
StoreSalalss, RoleSalalss, 
StoreCollaterals, RoleCollaterals, 
StorePresumptions, RolePresumptions, 
StoreTaxinglys, RoleTaxinglys, 
StoreStabss, RoleStabss, 
StoreStatutorilys, RoleStatutorilys, 
StoreBloviations, RoleBloviations, 
StorePeriphrasess, RolePeriphrasess, 
StoreReticulations, RoleReticulations, 
StorePiscinass, RolePiscinass, 
StoreStrontics, RoleStrontics, 
StoreKainitess, RoleKainitess, 
StoreFootlamberts, RoleFootlamberts, 
StoreAppraisees, RoleAppraisees, 
StoreZecchinis, RoleZecchinis, 
StoreSpooniests, RoleSpooniests, 
StoreRepotteds, RoleRepotteds, 
StoreHatables, RoleHatables, 
StoreRevisions, RoleRevisions, 
StoreOutrings, RoleOutrings, 
StoreEasinesss, RoleEasinesss, 
StoreQuibbless, RoleQuibbless, 
StoreFrowstss, RoleFrowstss, 
StoreMusculaturess, RoleMusculaturess, 
StoreReembracings, RoleReembracings, 
StoreBeguilements, RoleBeguilements, 
StoreCommissioners, RoleCommissioners, 
StoreStatusys, RoleStatusys, 
StoreCoronarys, RoleCoronarys, 
StoreApishs, RoleApishs, 
StoreAnguines, RoleAnguines, 
StoreViscachas, RoleViscachas, 
StoreCyanosiss, RoleCyanosiss, 
StoreMoquettess, RoleMoquettess, 
StoreChirpings, RoleChirpings, 
StoreNicotiness, RoleNicotiness, 
StoreFriendlilys, RoleFriendlilys, 
StorePolluterss, RolePolluterss, 
StoreDoornailss, RoleDoornailss, 
StoreAimfuls, RoleAimfuls, 
StoreClassicallys, RoleClassicallys, 
StoreGunpoints, RoleGunpoints, 
StoreCrannys, RoleCrannys, 
StoreFilleteds, RoleFilleteds, 
StoreAccessoriseds, RoleAccessoriseds, 
StorePrototypics, RolePrototypics, 
StorePreconciliars, RolePreconciliars, 
StoreRecencys, RoleRecencys, 
StoreBriniess, RoleBriniess, 
StoreVerduress, RoleVerduress, 
StoreImpassablys, RoleImpassablys, 
StoreDemocratics, RoleDemocratics, 
StoreFishingss, RoleFishingss, 
StoreHyperbolicals, RoleHyperbolicals, 
StoreObjurgates, RoleObjurgates, 
StoreMembranouss, RoleMembranouss, 
StoreStrobilaes, RoleStrobilaes, 
StoreLess, RoleLess, 
StoreRarefiers, RoleRarefiers, 
StoreCylixs, RoleCylixs, 

 Wallet { 

uint emitss;
uint geometrids;
uint unpedantics;
uint indigenouslys;
uint serfdoms;
uint embryons;
uint chlorophylls;
uint unfastidiouss;
uint intercrops;
uint senseiss;
uint epizoisms;
uint cockishs;
uint burnetss;
uint wetteds;
uint viewings;
uint funkerss;
uint bulks;
uint grumpishs;
uint doings;
uint phonemicss;
uint stoplightss;
uint pollenosiss;
uint reclusivenesss;
uint glabellaes;
uint declaweds;
uint moronitiess;
uint detoxifieds;
uint infatuateds;
uint apportioneds;
uint steamships;
uint allegiances;
uint orderlesss;
uint slobbishs;
uint equinoxess;
uint greaserss;
uint scootss;
uint dabbings;
uint cliftss;
uint clipsheetss;
uint deveinings;
uint salalss;
uint collaterals;
uint presumptions;
uint taxinglys;
uint stabss;
uint statutorilys;
uint bloviations;
uint periphrasess;
uint reticulations;
uint piscinass;
uint strontics;
uint kainitess;
uint footlamberts;
uint appraisees;
uint zecchinis;
uint spooniests;
uint repotteds;
uint hatables;
uint revisions;
uint outrings;
uint easinesss;
uint quibbless;
uint frowstss;
uint musculaturess;
uint reembracings;
uint beguilements;
uint commissioners;
uint statusys;
uint coronarys;
uint apishs;
uint anguines;
uint viscachas;
uint cyanosiss;
uint moquettess;
uint chirpings;
uint nicotiness;
uint friendlilys;
uint polluterss;
uint doornailss;
uint aimfuls;
uint classicallys;
uint gunpoints;
uint crannys;
uint filleteds;
uint accessoriseds;
uint prototypics;
uint preconciliars;
uint recencys;
uint briniess;
uint verduress;
uint impassablys;
uint democratics;
uint fishingss;
uint hyperbolicals;
uint objurgates;
uint membranouss;
uint strobilaes;
uint less;
uint rarefiers;
uint cylixs;

    mapping (uint256 => uint256) rolesMap;

    /// @dev Contract constructor.
    constructor() public {
        require(tvm.pubkey() != 0);
        tvm.accept();
    }
    

    ///////// Emitss ////////////
    function setRole0(uint256 roleId) public override onlySuperuser {
        rolesMap[0] = roleId;
    }

    function storeEmitss(uint num) public override onlyMemberOf(rolesMap[0]) {
        emitss = num;
    }   

    function getEmitss() public view alwaysAccept returns (uint current_apples) {
        current_emitss = emitss;
    }

    ////////////////////////////////////////

    ///////// Geometrids ////////////
    function setRole1(uint256 roleId) public override onlySuperuser {
        rolesMap[1] = roleId;
    }

    function storeGeometrids(uint num) public override onlyMemberOf(rolesMap[1]) {
        geometrids = num;
    }   

    function getGeometrids() public view alwaysAccept returns (uint current_apples) {
        current_geometrids = geometrids;
    }

    ////////////////////////////////////////

    ///////// Unpedantics ////////////
    function setRole2(uint256 roleId) public override onlySuperuser {
        rolesMap[2] = roleId;
    }

    function storeUnpedantics(uint num) public override onlyMemberOf(rolesMap[2]) {
        unpedantics = num;
    }   

    function getUnpedantics() public view alwaysAccept returns (uint current_apples) {
        current_unpedantics = unpedantics;
    }

    ////////////////////////////////////////

    ///////// Indigenouslys ////////////
    function setRole3(uint256 roleId) public override onlySuperuser {
        rolesMap[3] = roleId;
    }

    function storeIndigenouslys(uint num) public override onlyMemberOf(rolesMap[3]) {
        indigenouslys = num;
    }   

    function getIndigenouslys() public view alwaysAccept returns (uint current_apples) {
        current_indigenouslys = indigenouslys;
    }

    ////////////////////////////////////////

    ///////// Serfdoms ////////////
    function setRole4(uint256 roleId) public override onlySuperuser {
        rolesMap[4] = roleId;
    }

    function storeSerfdoms(uint num) public override onlyMemberOf(rolesMap[4]) {
        serfdoms = num;
    }   

    function getSerfdoms() public view alwaysAccept returns (uint current_apples) {
        current_serfdoms = serfdoms;
    }

    ////////////////////////////////////////

    ///////// Embryons ////////////
    function setRole5(uint256 roleId) public override onlySuperuser {
        rolesMap[5] = roleId;
    }

    function storeEmbryons(uint num) public override onlyMemberOf(rolesMap[5]) {
        embryons = num;
    }   

    function getEmbryons() public view alwaysAccept returns (uint current_apples) {
        current_embryons = embryons;
    }

    ////////////////////////////////////////

    ///////// Chlorophylls ////////////
    function setRole6(uint256 roleId) public override onlySuperuser {
        rolesMap[6] = roleId;
    }

    function storeChlorophylls(uint num) public override onlyMemberOf(rolesMap[6]) {
        chlorophylls = num;
    }   

    function getChlorophylls() public view alwaysAccept returns (uint current_apples) {
        current_chlorophylls = chlorophylls;
    }

    ////////////////////////////////////////

    ///////// Unfastidiouss ////////////
    function setRole7(uint256 roleId) public override onlySuperuser {
        rolesMap[7] = roleId;
    }

    function storeUnfastidiouss(uint num) public override onlyMemberOf(rolesMap[7]) {
        unfastidiouss = num;
    }   

    function getUnfastidiouss() public view alwaysAccept returns (uint current_apples) {
        current_unfastidiouss = unfastidiouss;
    }

    ////////////////////////////////////////

    ///////// Intercrops ////////////
    function setRole8(uint256 roleId) public override onlySuperuser {
        rolesMap[8] = roleId;
    }

    function storeIntercrops(uint num) public override onlyMemberOf(rolesMap[8]) {
        intercrops = num;
    }   

    function getIntercrops() public view alwaysAccept returns (uint current_apples) {
        current_intercrops = intercrops;
    }

    ////////////////////////////////////////

    ///////// Senseiss ////////////
    function setRole9(uint256 roleId) public override onlySuperuser {
        rolesMap[9] = roleId;
    }

    function storeSenseiss(uint num) public override onlyMemberOf(rolesMap[9]) {
        senseiss = num;
    }   

    function getSenseiss() public view alwaysAccept returns (uint current_apples) {
        current_senseiss = senseiss;
    }

    ////////////////////////////////////////

    ///////// Epizoisms ////////////
    function setRole10(uint256 roleId) public override onlySuperuser {
        rolesMap[10] = roleId;
    }

    function storeEpizoisms(uint num) public override onlyMemberOf(rolesMap[10]) {
        epizoisms = num;
    }   

    function getEpizoisms() public view alwaysAccept returns (uint current_apples) {
        current_epizoisms = epizoisms;
    }

    ////////////////////////////////////////

    ///////// Cockishs ////////////
    function setRole11(uint256 roleId) public override onlySuperuser {
        rolesMap[11] = roleId;
    }

    function storeCockishs(uint num) public override onlyMemberOf(rolesMap[11]) {
        cockishs = num;
    }   

    function getCockishs() public view alwaysAccept returns (uint current_apples) {
        current_cockishs = cockishs;
    }

    ////////////////////////////////////////

    ///////// Burnetss ////////////
    function setRole12(uint256 roleId) public override onlySuperuser {
        rolesMap[12] = roleId;
    }

    function storeBurnetss(uint num) public override onlyMemberOf(rolesMap[12]) {
        burnetss = num;
    }   

    function getBurnetss() public view alwaysAccept returns (uint current_apples) {
        current_burnetss = burnetss;
    }

    ////////////////////////////////////////

    ///////// Wetteds ////////////
    function setRole13(uint256 roleId) public override onlySuperuser {
        rolesMap[13] = roleId;
    }

    function storeWetteds(uint num) public override onlyMemberOf(rolesMap[13]) {
        wetteds = num;
    }   

    function getWetteds() public view alwaysAccept returns (uint current_apples) {
        current_wetteds = wetteds;
    }

    ////////////////////////////////////////

    ///////// Viewings ////////////
    function setRole14(uint256 roleId) public override onlySuperuser {
        rolesMap[14] = roleId;
    }

    function storeViewings(uint num) public override onlyMemberOf(rolesMap[14]) {
        viewings = num;
    }   

    function getViewings() public view alwaysAccept returns (uint current_apples) {
        current_viewings = viewings;
    }

    ////////////////////////////////////////

    ///////// Funkerss ////////////
    function setRole15(uint256 roleId) public override onlySuperuser {
        rolesMap[15] = roleId;
    }

    function storeFunkerss(uint num) public override onlyMemberOf(rolesMap[15]) {
        funkerss = num;
    }   

    function getFunkerss() public view alwaysAccept returns (uint current_apples) {
        current_funkerss = funkerss;
    }

    ////////////////////////////////////////

    ///////// Bulks ////////////
    function setRole16(uint256 roleId) public override onlySuperuser {
        rolesMap[16] = roleId;
    }

    function storeBulks(uint num) public override onlyMemberOf(rolesMap[16]) {
        bulks = num;
    }   

    function getBulks() public view alwaysAccept returns (uint current_apples) {
        current_bulks = bulks;
    }

    ////////////////////////////////////////

    ///////// Grumpishs ////////////
    function setRole17(uint256 roleId) public override onlySuperuser {
        rolesMap[17] = roleId;
    }

    function storeGrumpishs(uint num) public override onlyMemberOf(rolesMap[17]) {
        grumpishs = num;
    }   

    function getGrumpishs() public view alwaysAccept returns (uint current_apples) {
        current_grumpishs = grumpishs;
    }

    ////////////////////////////////////////

    ///////// Doings ////////////
    function setRole18(uint256 roleId) public override onlySuperuser {
        rolesMap[18] = roleId;
    }

    function storeDoings(uint num) public override onlyMemberOf(rolesMap[18]) {
        doings = num;
    }   

    function getDoings() public view alwaysAccept returns (uint current_apples) {
        current_doings = doings;
    }

    ////////////////////////////////////////

    ///////// Phonemicss ////////////
    function setRole19(uint256 roleId) public override onlySuperuser {
        rolesMap[19] = roleId;
    }

    function storePhonemicss(uint num) public override onlyMemberOf(rolesMap[19]) {
        phonemicss = num;
    }   

    function getPhonemicss() public view alwaysAccept returns (uint current_apples) {
        current_phonemicss = phonemicss;
    }

    ////////////////////////////////////////

    ///////// Stoplightss ////////////
    function setRole20(uint256 roleId) public override onlySuperuser {
        rolesMap[20] = roleId;
    }

    function storeStoplightss(uint num) public override onlyMemberOf(rolesMap[20]) {
        stoplightss = num;
    }   

    function getStoplightss() public view alwaysAccept returns (uint current_apples) {
        current_stoplightss = stoplightss;
    }

    ////////////////////////////////////////

    ///////// Pollenosiss ////////////
    function setRole21(uint256 roleId) public override onlySuperuser {
        rolesMap[21] = roleId;
    }

    function storePollenosiss(uint num) public override onlyMemberOf(rolesMap[21]) {
        pollenosiss = num;
    }   

    function getPollenosiss() public view alwaysAccept returns (uint current_apples) {
        current_pollenosiss = pollenosiss;
    }

    ////////////////////////////////////////

    ///////// Reclusivenesss ////////////
    function setRole22(uint256 roleId) public override onlySuperuser {
        rolesMap[22] = roleId;
    }

    function storeReclusivenesss(uint num) public override onlyMemberOf(rolesMap[22]) {
        reclusivenesss = num;
    }   

    function getReclusivenesss() public view alwaysAccept returns (uint current_apples) {
        current_reclusivenesss = reclusivenesss;
    }

    ////////////////////////////////////////

    ///////// Glabellaes ////////////
    function setRole23(uint256 roleId) public override onlySuperuser {
        rolesMap[23] = roleId;
    }

    function storeGlabellaes(uint num) public override onlyMemberOf(rolesMap[23]) {
        glabellaes = num;
    }   

    function getGlabellaes() public view alwaysAccept returns (uint current_apples) {
        current_glabellaes = glabellaes;
    }

    ////////////////////////////////////////

    ///////// Declaweds ////////////
    function setRole24(uint256 roleId) public override onlySuperuser {
        rolesMap[24] = roleId;
    }

    function storeDeclaweds(uint num) public override onlyMemberOf(rolesMap[24]) {
        declaweds = num;
    }   

    function getDeclaweds() public view alwaysAccept returns (uint current_apples) {
        current_declaweds = declaweds;
    }

    ////////////////////////////////////////

    ///////// Moronitiess ////////////
    function setRole25(uint256 roleId) public override onlySuperuser {
        rolesMap[25] = roleId;
    }

    function storeMoronitiess(uint num) public override onlyMemberOf(rolesMap[25]) {
        moronitiess = num;
    }   

    function getMoronitiess() public view alwaysAccept returns (uint current_apples) {
        current_moronitiess = moronitiess;
    }

    ////////////////////////////////////////

    ///////// Detoxifieds ////////////
    function setRole26(uint256 roleId) public override onlySuperuser {
        rolesMap[26] = roleId;
    }

    function storeDetoxifieds(uint num) public override onlyMemberOf(rolesMap[26]) {
        detoxifieds = num;
    }   

    function getDetoxifieds() public view alwaysAccept returns (uint current_apples) {
        current_detoxifieds = detoxifieds;
    }

    ////////////////////////////////////////

    ///////// Infatuateds ////////////
    function setRole27(uint256 roleId) public override onlySuperuser {
        rolesMap[27] = roleId;
    }

    function storeInfatuateds(uint num) public override onlyMemberOf(rolesMap[27]) {
        infatuateds = num;
    }   

    function getInfatuateds() public view alwaysAccept returns (uint current_apples) {
        current_infatuateds = infatuateds;
    }

    ////////////////////////////////////////

    ///////// Apportioneds ////////////
    function setRole28(uint256 roleId) public override onlySuperuser {
        rolesMap[28] = roleId;
    }

    function storeApportioneds(uint num) public override onlyMemberOf(rolesMap[28]) {
        apportioneds = num;
    }   

    function getApportioneds() public view alwaysAccept returns (uint current_apples) {
        current_apportioneds = apportioneds;
    }

    ////////////////////////////////////////

    ///////// Steamships ////////////
    function setRole29(uint256 roleId) public override onlySuperuser {
        rolesMap[29] = roleId;
    }

    function storeSteamships(uint num) public override onlyMemberOf(rolesMap[29]) {
        steamships = num;
    }   

    function getSteamships() public view alwaysAccept returns (uint current_apples) {
        current_steamships = steamships;
    }

    ////////////////////////////////////////

    ///////// Allegiances ////////////
    function setRole30(uint256 roleId) public override onlySuperuser {
        rolesMap[30] = roleId;
    }

    function storeAllegiances(uint num) public override onlyMemberOf(rolesMap[30]) {
        allegiances = num;
    }   

    function getAllegiances() public view alwaysAccept returns (uint current_apples) {
        current_allegiances = allegiances;
    }

    ////////////////////////////////////////

    ///////// Orderlesss ////////////
    function setRole31(uint256 roleId) public override onlySuperuser {
        rolesMap[31] = roleId;
    }

    function storeOrderlesss(uint num) public override onlyMemberOf(rolesMap[31]) {
        orderlesss = num;
    }   

    function getOrderlesss() public view alwaysAccept returns (uint current_apples) {
        current_orderlesss = orderlesss;
    }

    ////////////////////////////////////////

    ///////// Slobbishs ////////////
    function setRole32(uint256 roleId) public override onlySuperuser {
        rolesMap[32] = roleId;
    }

    function storeSlobbishs(uint num) public override onlyMemberOf(rolesMap[32]) {
        slobbishs = num;
    }   

    function getSlobbishs() public view alwaysAccept returns (uint current_apples) {
        current_slobbishs = slobbishs;
    }

    ////////////////////////////////////////

    ///////// Equinoxess ////////////
    function setRole33(uint256 roleId) public override onlySuperuser {
        rolesMap[33] = roleId;
    }

    function storeEquinoxess(uint num) public override onlyMemberOf(rolesMap[33]) {
        equinoxess = num;
    }   

    function getEquinoxess() public view alwaysAccept returns (uint current_apples) {
        current_equinoxess = equinoxess;
    }

    ////////////////////////////////////////

    ///////// Greaserss ////////////
    function setRole34(uint256 roleId) public override onlySuperuser {
        rolesMap[34] = roleId;
    }

    function storeGreaserss(uint num) public override onlyMemberOf(rolesMap[34]) {
        greaserss = num;
    }   

    function getGreaserss() public view alwaysAccept returns (uint current_apples) {
        current_greaserss = greaserss;
    }

    ////////////////////////////////////////

    ///////// Scootss ////////////
    function setRole35(uint256 roleId) public override onlySuperuser {
        rolesMap[35] = roleId;
    }

    function storeScootss(uint num) public override onlyMemberOf(rolesMap[35]) {
        scootss = num;
    }   

    function getScootss() public view alwaysAccept returns (uint current_apples) {
        current_scootss = scootss;
    }

    ////////////////////////////////////////

    ///////// Dabbings ////////////
    function setRole36(uint256 roleId) public override onlySuperuser {
        rolesMap[36] = roleId;
    }

    function storeDabbings(uint num) public override onlyMemberOf(rolesMap[36]) {
        dabbings = num;
    }   

    function getDabbings() public view alwaysAccept returns (uint current_apples) {
        current_dabbings = dabbings;
    }

    ////////////////////////////////////////

    ///////// Cliftss ////////////
    function setRole37(uint256 roleId) public override onlySuperuser {
        rolesMap[37] = roleId;
    }

    function storeCliftss(uint num) public override onlyMemberOf(rolesMap[37]) {
        cliftss = num;
    }   

    function getCliftss() public view alwaysAccept returns (uint current_apples) {
        current_cliftss = cliftss;
    }

    ////////////////////////////////////////

    ///////// Clipsheetss ////////////
    function setRole38(uint256 roleId) public override onlySuperuser {
        rolesMap[38] = roleId;
    }

    function storeClipsheetss(uint num) public override onlyMemberOf(rolesMap[38]) {
        clipsheetss = num;
    }   

    function getClipsheetss() public view alwaysAccept returns (uint current_apples) {
        current_clipsheetss = clipsheetss;
    }

    ////////////////////////////////////////

    ///////// Deveinings ////////////
    function setRole39(uint256 roleId) public override onlySuperuser {
        rolesMap[39] = roleId;
    }

    function storeDeveinings(uint num) public override onlyMemberOf(rolesMap[39]) {
        deveinings = num;
    }   

    function getDeveinings() public view alwaysAccept returns (uint current_apples) {
        current_deveinings = deveinings;
    }

    ////////////////////////////////////////

    ///////// Salalss ////////////
    function setRole40(uint256 roleId) public override onlySuperuser {
        rolesMap[40] = roleId;
    }

    function storeSalalss(uint num) public override onlyMemberOf(rolesMap[40]) {
        salalss = num;
    }   

    function getSalalss() public view alwaysAccept returns (uint current_apples) {
        current_salalss = salalss;
    }

    ////////////////////////////////////////

    ///////// Collaterals ////////////
    function setRole41(uint256 roleId) public override onlySuperuser {
        rolesMap[41] = roleId;
    }

    function storeCollaterals(uint num) public override onlyMemberOf(rolesMap[41]) {
        collaterals = num;
    }   

    function getCollaterals() public view alwaysAccept returns (uint current_apples) {
        current_collaterals = collaterals;
    }

    ////////////////////////////////////////

    ///////// Presumptions ////////////
    function setRole42(uint256 roleId) public override onlySuperuser {
        rolesMap[42] = roleId;
    }

    function storePresumptions(uint num) public override onlyMemberOf(rolesMap[42]) {
        presumptions = num;
    }   

    function getPresumptions() public view alwaysAccept returns (uint current_apples) {
        current_presumptions = presumptions;
    }

    ////////////////////////////////////////

    ///////// Taxinglys ////////////
    function setRole43(uint256 roleId) public override onlySuperuser {
        rolesMap[43] = roleId;
    }

    function storeTaxinglys(uint num) public override onlyMemberOf(rolesMap[43]) {
        taxinglys = num;
    }   

    function getTaxinglys() public view alwaysAccept returns (uint current_apples) {
        current_taxinglys = taxinglys;
    }

    ////////////////////////////////////////

    ///////// Stabss ////////////
    function setRole44(uint256 roleId) public override onlySuperuser {
        rolesMap[44] = roleId;
    }

    function storeStabss(uint num) public override onlyMemberOf(rolesMap[44]) {
        stabss = num;
    }   

    function getStabss() public view alwaysAccept returns (uint current_apples) {
        current_stabss = stabss;
    }

    ////////////////////////////////////////

    ///////// Statutorilys ////////////
    function setRole45(uint256 roleId) public override onlySuperuser {
        rolesMap[45] = roleId;
    }

    function storeStatutorilys(uint num) public override onlyMemberOf(rolesMap[45]) {
        statutorilys = num;
    }   

    function getStatutorilys() public view alwaysAccept returns (uint current_apples) {
        current_statutorilys = statutorilys;
    }

    ////////////////////////////////////////

    ///////// Bloviations ////////////
    function setRole46(uint256 roleId) public override onlySuperuser {
        rolesMap[46] = roleId;
    }

    function storeBloviations(uint num) public override onlyMemberOf(rolesMap[46]) {
        bloviations = num;
    }   

    function getBloviations() public view alwaysAccept returns (uint current_apples) {
        current_bloviations = bloviations;
    }

    ////////////////////////////////////////

    ///////// Periphrasess ////////////
    function setRole47(uint256 roleId) public override onlySuperuser {
        rolesMap[47] = roleId;
    }

    function storePeriphrasess(uint num) public override onlyMemberOf(rolesMap[47]) {
        periphrasess = num;
    }   

    function getPeriphrasess() public view alwaysAccept returns (uint current_apples) {
        current_periphrasess = periphrasess;
    }

    ////////////////////////////////////////

    ///////// Reticulations ////////////
    function setRole48(uint256 roleId) public override onlySuperuser {
        rolesMap[48] = roleId;
    }

    function storeReticulations(uint num) public override onlyMemberOf(rolesMap[48]) {
        reticulations = num;
    }   

    function getReticulations() public view alwaysAccept returns (uint current_apples) {
        current_reticulations = reticulations;
    }

    ////////////////////////////////////////

    ///////// Piscinass ////////////
    function setRole49(uint256 roleId) public override onlySuperuser {
        rolesMap[49] = roleId;
    }

    function storePiscinass(uint num) public override onlyMemberOf(rolesMap[49]) {
        piscinass = num;
    }   

    function getPiscinass() public view alwaysAccept returns (uint current_apples) {
        current_piscinass = piscinass;
    }

    ////////////////////////////////////////

    ///////// Strontics ////////////
    function setRole50(uint256 roleId) public override onlySuperuser {
        rolesMap[50] = roleId;
    }

    function storeStrontics(uint num) public override onlyMemberOf(rolesMap[50]) {
        strontics = num;
    }   

    function getStrontics() public view alwaysAccept returns (uint current_apples) {
        current_strontics = strontics;
    }

    ////////////////////////////////////////

    ///////// Kainitess ////////////
    function setRole51(uint256 roleId) public override onlySuperuser {
        rolesMap[51] = roleId;
    }

    function storeKainitess(uint num) public override onlyMemberOf(rolesMap[51]) {
        kainitess = num;
    }   

    function getKainitess() public view alwaysAccept returns (uint current_apples) {
        current_kainitess = kainitess;
    }

    ////////////////////////////////////////

    ///////// Footlamberts ////////////
    function setRole52(uint256 roleId) public override onlySuperuser {
        rolesMap[52] = roleId;
    }

    function storeFootlamberts(uint num) public override onlyMemberOf(rolesMap[52]) {
        footlamberts = num;
    }   

    function getFootlamberts() public view alwaysAccept returns (uint current_apples) {
        current_footlamberts = footlamberts;
    }

    ////////////////////////////////////////

    ///////// Appraisees ////////////
    function setRole53(uint256 roleId) public override onlySuperuser {
        rolesMap[53] = roleId;
    }

    function storeAppraisees(uint num) public override onlyMemberOf(rolesMap[53]) {
        appraisees = num;
    }   

    function getAppraisees() public view alwaysAccept returns (uint current_apples) {
        current_appraisees = appraisees;
    }

    ////////////////////////////////////////

    ///////// Zecchinis ////////////
    function setRole54(uint256 roleId) public override onlySuperuser {
        rolesMap[54] = roleId;
    }

    function storeZecchinis(uint num) public override onlyMemberOf(rolesMap[54]) {
        zecchinis = num;
    }   

    function getZecchinis() public view alwaysAccept returns (uint current_apples) {
        current_zecchinis = zecchinis;
    }

    ////////////////////////////////////////

    ///////// Spooniests ////////////
    function setRole55(uint256 roleId) public override onlySuperuser {
        rolesMap[55] = roleId;
    }

    function storeSpooniests(uint num) public override onlyMemberOf(rolesMap[55]) {
        spooniests = num;
    }   

    function getSpooniests() public view alwaysAccept returns (uint current_apples) {
        current_spooniests = spooniests;
    }

    ////////////////////////////////////////

    ///////// Repotteds ////////////
    function setRole56(uint256 roleId) public override onlySuperuser {
        rolesMap[56] = roleId;
    }

    function storeRepotteds(uint num) public override onlyMemberOf(rolesMap[56]) {
        repotteds = num;
    }   

    function getRepotteds() public view alwaysAccept returns (uint current_apples) {
        current_repotteds = repotteds;
    }

    ////////////////////////////////////////

    ///////// Hatables ////////////
    function setRole57(uint256 roleId) public override onlySuperuser {
        rolesMap[57] = roleId;
    }

    function storeHatables(uint num) public override onlyMemberOf(rolesMap[57]) {
        hatables = num;
    }   

    function getHatables() public view alwaysAccept returns (uint current_apples) {
        current_hatables = hatables;
    }

    ////////////////////////////////////////

    ///////// Revisions ////////////
    function setRole58(uint256 roleId) public override onlySuperuser {
        rolesMap[58] = roleId;
    }

    function storeRevisions(uint num) public override onlyMemberOf(rolesMap[58]) {
        revisions = num;
    }   

    function getRevisions() public view alwaysAccept returns (uint current_apples) {
        current_revisions = revisions;
    }

    ////////////////////////////////////////

    ///////// Outrings ////////////
    function setRole59(uint256 roleId) public override onlySuperuser {
        rolesMap[59] = roleId;
    }

    function storeOutrings(uint num) public override onlyMemberOf(rolesMap[59]) {
        outrings = num;
    }   

    function getOutrings() public view alwaysAccept returns (uint current_apples) {
        current_outrings = outrings;
    }

    ////////////////////////////////////////

    ///////// Easinesss ////////////
    function setRole60(uint256 roleId) public override onlySuperuser {
        rolesMap[60] = roleId;
    }

    function storeEasinesss(uint num) public override onlyMemberOf(rolesMap[60]) {
        easinesss = num;
    }   

    function getEasinesss() public view alwaysAccept returns (uint current_apples) {
        current_easinesss = easinesss;
    }

    ////////////////////////////////////////

    ///////// Quibbless ////////////
    function setRole61(uint256 roleId) public override onlySuperuser {
        rolesMap[61] = roleId;
    }

    function storeQuibbless(uint num) public override onlyMemberOf(rolesMap[61]) {
        quibbless = num;
    }   

    function getQuibbless() public view alwaysAccept returns (uint current_apples) {
        current_quibbless = quibbless;
    }

    ////////////////////////////////////////

    ///////// Frowstss ////////////
    function setRole62(uint256 roleId) public override onlySuperuser {
        rolesMap[62] = roleId;
    }

    function storeFrowstss(uint num) public override onlyMemberOf(rolesMap[62]) {
        frowstss = num;
    }   

    function getFrowstss() public view alwaysAccept returns (uint current_apples) {
        current_frowstss = frowstss;
    }

    ////////////////////////////////////////

    ///////// Musculaturess ////////////
    function setRole63(uint256 roleId) public override onlySuperuser {
        rolesMap[63] = roleId;
    }

    function storeMusculaturess(uint num) public override onlyMemberOf(rolesMap[63]) {
        musculaturess = num;
    }   

    function getMusculaturess() public view alwaysAccept returns (uint current_apples) {
        current_musculaturess = musculaturess;
    }

    ////////////////////////////////////////

    ///////// Reembracings ////////////
    function setRole64(uint256 roleId) public override onlySuperuser {
        rolesMap[64] = roleId;
    }

    function storeReembracings(uint num) public override onlyMemberOf(rolesMap[64]) {
        reembracings = num;
    }   

    function getReembracings() public view alwaysAccept returns (uint current_apples) {
        current_reembracings = reembracings;
    }

    ////////////////////////////////////////

    ///////// Beguilements ////////////
    function setRole65(uint256 roleId) public override onlySuperuser {
        rolesMap[65] = roleId;
    }

    function storeBeguilements(uint num) public override onlyMemberOf(rolesMap[65]) {
        beguilements = num;
    }   

    function getBeguilements() public view alwaysAccept returns (uint current_apples) {
        current_beguilements = beguilements;
    }

    ////////////////////////////////////////

    ///////// Commissioners ////////////
    function setRole66(uint256 roleId) public override onlySuperuser {
        rolesMap[66] = roleId;
    }

    function storeCommissioners(uint num) public override onlyMemberOf(rolesMap[66]) {
        commissioners = num;
    }   

    function getCommissioners() public view alwaysAccept returns (uint current_apples) {
        current_commissioners = commissioners;
    }

    ////////////////////////////////////////

    ///////// Statusys ////////////
    function setRole67(uint256 roleId) public override onlySuperuser {
        rolesMap[67] = roleId;
    }

    function storeStatusys(uint num) public override onlyMemberOf(rolesMap[67]) {
        statusys = num;
    }   

    function getStatusys() public view alwaysAccept returns (uint current_apples) {
        current_statusys = statusys;
    }

    ////////////////////////////////////////

    ///////// Coronarys ////////////
    function setRole68(uint256 roleId) public override onlySuperuser {
        rolesMap[68] = roleId;
    }

    function storeCoronarys(uint num) public override onlyMemberOf(rolesMap[68]) {
        coronarys = num;
    }   

    function getCoronarys() public view alwaysAccept returns (uint current_apples) {
        current_coronarys = coronarys;
    }

    ////////////////////////////////////////

    ///////// Apishs ////////////
    function setRole69(uint256 roleId) public override onlySuperuser {
        rolesMap[69] = roleId;
    }

    function storeApishs(uint num) public override onlyMemberOf(rolesMap[69]) {
        apishs = num;
    }   

    function getApishs() public view alwaysAccept returns (uint current_apples) {
        current_apishs = apishs;
    }

    ////////////////////////////////////////

    ///////// Anguines ////////////
    function setRole70(uint256 roleId) public override onlySuperuser {
        rolesMap[70] = roleId;
    }

    function storeAnguines(uint num) public override onlyMemberOf(rolesMap[70]) {
        anguines = num;
    }   

    function getAnguines() public view alwaysAccept returns (uint current_apples) {
        current_anguines = anguines;
    }

    ////////////////////////////////////////

    ///////// Viscachas ////////////
    function setRole71(uint256 roleId) public override onlySuperuser {
        rolesMap[71] = roleId;
    }

    function storeViscachas(uint num) public override onlyMemberOf(rolesMap[71]) {
        viscachas = num;
    }   

    function getViscachas() public view alwaysAccept returns (uint current_apples) {
        current_viscachas = viscachas;
    }

    ////////////////////////////////////////

    ///////// Cyanosiss ////////////
    function setRole72(uint256 roleId) public override onlySuperuser {
        rolesMap[72] = roleId;
    }

    function storeCyanosiss(uint num) public override onlyMemberOf(rolesMap[72]) {
        cyanosiss = num;
    }   

    function getCyanosiss() public view alwaysAccept returns (uint current_apples) {
        current_cyanosiss = cyanosiss;
    }

    ////////////////////////////////////////

    ///////// Moquettess ////////////
    function setRole73(uint256 roleId) public override onlySuperuser {
        rolesMap[73] = roleId;
    }

    function storeMoquettess(uint num) public override onlyMemberOf(rolesMap[73]) {
        moquettess = num;
    }   

    function getMoquettess() public view alwaysAccept returns (uint current_apples) {
        current_moquettess = moquettess;
    }

    ////////////////////////////////////////

    ///////// Chirpings ////////////
    function setRole74(uint256 roleId) public override onlySuperuser {
        rolesMap[74] = roleId;
    }

    function storeChirpings(uint num) public override onlyMemberOf(rolesMap[74]) {
        chirpings = num;
    }   

    function getChirpings() public view alwaysAccept returns (uint current_apples) {
        current_chirpings = chirpings;
    }

    ////////////////////////////////////////

    ///////// Nicotiness ////////////
    function setRole75(uint256 roleId) public override onlySuperuser {
        rolesMap[75] = roleId;
    }

    function storeNicotiness(uint num) public override onlyMemberOf(rolesMap[75]) {
        nicotiness = num;
    }   

    function getNicotiness() public view alwaysAccept returns (uint current_apples) {
        current_nicotiness = nicotiness;
    }

    ////////////////////////////////////////

    ///////// Friendlilys ////////////
    function setRole76(uint256 roleId) public override onlySuperuser {
        rolesMap[76] = roleId;
    }

    function storeFriendlilys(uint num) public override onlyMemberOf(rolesMap[76]) {
        friendlilys = num;
    }   

    function getFriendlilys() public view alwaysAccept returns (uint current_apples) {
        current_friendlilys = friendlilys;
    }

    ////////////////////////////////////////

    ///////// Polluterss ////////////
    function setRole77(uint256 roleId) public override onlySuperuser {
        rolesMap[77] = roleId;
    }

    function storePolluterss(uint num) public override onlyMemberOf(rolesMap[77]) {
        polluterss = num;
    }   

    function getPolluterss() public view alwaysAccept returns (uint current_apples) {
        current_polluterss = polluterss;
    }

    ////////////////////////////////////////

    ///////// Doornailss ////////////
    function setRole78(uint256 roleId) public override onlySuperuser {
        rolesMap[78] = roleId;
    }

    function storeDoornailss(uint num) public override onlyMemberOf(rolesMap[78]) {
        doornailss = num;
    }   

    function getDoornailss() public view alwaysAccept returns (uint current_apples) {
        current_doornailss = doornailss;
    }

    ////////////////////////////////////////

    ///////// Aimfuls ////////////
    function setRole79(uint256 roleId) public override onlySuperuser {
        rolesMap[79] = roleId;
    }

    function storeAimfuls(uint num) public override onlyMemberOf(rolesMap[79]) {
        aimfuls = num;
    }   

    function getAimfuls() public view alwaysAccept returns (uint current_apples) {
        current_aimfuls = aimfuls;
    }

    ////////////////////////////////////////

    ///////// Classicallys ////////////
    function setRole80(uint256 roleId) public override onlySuperuser {
        rolesMap[80] = roleId;
    }

    function storeClassicallys(uint num) public override onlyMemberOf(rolesMap[80]) {
        classicallys = num;
    }   

    function getClassicallys() public view alwaysAccept returns (uint current_apples) {
        current_classicallys = classicallys;
    }

    ////////////////////////////////////////

    ///////// Gunpoints ////////////
    function setRole81(uint256 roleId) public override onlySuperuser {
        rolesMap[81] = roleId;
    }

    function storeGunpoints(uint num) public override onlyMemberOf(rolesMap[81]) {
        gunpoints = num;
    }   

    function getGunpoints() public view alwaysAccept returns (uint current_apples) {
        current_gunpoints = gunpoints;
    }

    ////////////////////////////////////////

    ///////// Crannys ////////////
    function setRole82(uint256 roleId) public override onlySuperuser {
        rolesMap[82] = roleId;
    }

    function storeCrannys(uint num) public override onlyMemberOf(rolesMap[82]) {
        crannys = num;
    }   

    function getCrannys() public view alwaysAccept returns (uint current_apples) {
        current_crannys = crannys;
    }

    ////////////////////////////////////////

    ///////// Filleteds ////////////
    function setRole83(uint256 roleId) public override onlySuperuser {
        rolesMap[83] = roleId;
    }

    function storeFilleteds(uint num) public override onlyMemberOf(rolesMap[83]) {
        filleteds = num;
    }   

    function getFilleteds() public view alwaysAccept returns (uint current_apples) {
        current_filleteds = filleteds;
    }

    ////////////////////////////////////////

    ///////// Accessoriseds ////////////
    function setRole84(uint256 roleId) public override onlySuperuser {
        rolesMap[84] = roleId;
    }

    function storeAccessoriseds(uint num) public override onlyMemberOf(rolesMap[84]) {
        accessoriseds = num;
    }   

    function getAccessoriseds() public view alwaysAccept returns (uint current_apples) {
        current_accessoriseds = accessoriseds;
    }

    ////////////////////////////////////////

    ///////// Prototypics ////////////
    function setRole85(uint256 roleId) public override onlySuperuser {
        rolesMap[85] = roleId;
    }

    function storePrototypics(uint num) public override onlyMemberOf(rolesMap[85]) {
        prototypics = num;
    }   

    function getPrototypics() public view alwaysAccept returns (uint current_apples) {
        current_prototypics = prototypics;
    }

    ////////////////////////////////////////

    ///////// Preconciliars ////////////
    function setRole86(uint256 roleId) public override onlySuperuser {
        rolesMap[86] = roleId;
    }

    function storePreconciliars(uint num) public override onlyMemberOf(rolesMap[86]) {
        preconciliars = num;
    }   

    function getPreconciliars() public view alwaysAccept returns (uint current_apples) {
        current_preconciliars = preconciliars;
    }

    ////////////////////////////////////////
